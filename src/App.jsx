import { useEffect, useMemo, useRef, useState } from "react";
import { Heart, Lock, Unlock, Sparkles, RefreshCcw } from "lucide-react";

// Love Password ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ —Å —é–º–æ—Ä–æ–º (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–µ)
// ‚úîÔ∏è –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞: –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã, –∫—Ä—É–ø–Ω—ã–µ —Ç–∞–ø—ã, —Å—Ç–µ–∫ –Ω–∞ –º–∞–ª—ã—Ö —ç–∫—Ä–∞–Ω–∞—Ö
// ‚úîÔ∏è 100dvh, safe-area, —Å–∫—Ä–æ–ª–ª –∫ –∏–Ω–ø—É—Ç—É –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ, enterKeyHint
// ‚úîÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ localStorage

const STORAGE_KEY = "love_password_progress_v1";

export default function LovePassword() {
  const [idx, setIdx] = useState(() => loadProgress()); // —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
  const [input, setInput] = useState("");
  const [msg, setMsg] = useState("");
  const [status, setStatus] = useState("idle"); // "idle"|"ok"|"err"|"done"
  const [shakes, setShakes] = useState(0); // –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–µ—Ä–¥—Ü–∞
  const inputRef = useRef(null);

  const level = LEVELS[idx];
  const total = LEVELS.length;
  const done = idx >= total;

  useEffect(() => { saveProgress(idx); }, [idx]);

  // –ú—è–≥–∫–∏–π —Å–∫—Ä–æ–ª–ª –∫ –ø–æ–ª—é –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ (–∫–æ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
  useEffect(() => {
    const el = inputRef.current; if (!el) return;
    const onFocus = () => {
      setTimeout(() => {
        try { el.scrollIntoView({ behavior: "smooth", block: "center" }); } catch {}
      }, 100);
    };
    el.addEventListener("focus", onFocus);
    return () => el.removeEventListener("focus", onFocus);
  }, []);

  function normalize(s) {
    return (s || "")
      .toString()
      .trim()
      .toLowerCase()
      .replace(/—ë/g, "–µ")
      .replace(/\s+/g, "");
  }

  function sfx(ok) {
    try {
      const AC = window.AudioContext || window.webkitAudioContext; if (!AC) return;
      const ctx = new AC();
      const o = ctx.createOscillator();
      const g = ctx.createGain();
      o.type = ok ? "triangle" : "sawtooth";
      o.frequency.value = ok ? 740 : 180;
      g.gain.value = 0.04; o.connect(g); g.connect(ctx.destination);
      o.start(); setTimeout(() => { o.stop(); ctx.close(); }, 160);
    } catch {}
  }

  function handleSubmit() {
    if (done) return;
    const ok = normalize(input) === normalize(level.answer);
    if (ok) {
      sfx(true);
      setStatus("ok");
      setMsg(pick(level.reactions.correct));
      setTimeout(() => {
        setInput("");
        if (idx + 1 >= total) setStatus("done");
        setIdx(i => i + 1);
      }, 700);
    } else {
      sfx(false);
      setStatus("err");
      setMsg(pick(level.reactions.wrong));
      setShakes(s => s + 1);
    }
  }

  function resetAll() {
    setIdx(0); setStatus("idle"); setInput(""); setMsg("");
    try { localStorage.removeItem(STORAGE_KEY); } catch {}
  }

  const progressPct = useMemo(() => Math.min(100, Math.round((Math.min(idx, total) / total) * 100)), [idx, total]);

  return (
    <div
      className="min-h-[100dvh] w-full bg-gradient-to-b from-rose-100 via-pink-100 to-indigo-100"
      style={{ paddingBottom: "env(safe-area-inset-bottom)" }}
    >
      <div className="mx-auto max-w-3xl px-3 sm:px-4 py-4 sm:py-6 md:py-10">
        <Header onReset={resetAll} progressPct={progressPct} idx={Math.min(idx, total)} total={total} />

        <div className="mt-3 sm:mt-4 rounded-3xl border bg-white/80 backdrop-blur p-4 sm:p-6 md:p-6 shadow-sm">
          {!done ? (
            <>
              <HeartLock open={status === "ok"} shake={status === "err" ? shakes : 0} />
              <div className="mt-3 sm:mt-4 text-xs sm:text-sm opacity-70">–£—Ä–æ–≤–µ–Ω—å {idx + 1} / {total}</div>
              <h2 className="text-lg sm:text-xl md:text-2xl font-semibold mt-1">{level.prompt}</h2>
              {level.note && <p className="opacity-70 mt-1 text-xs sm:text-sm">{level.note}</p>}

              <div className="grid gap-2 sm:gap-3 mt-4 sm:mt-5 md:grid-cols-[1fr_auto]">
                <input
                  ref={inputRef}
                  autoFocus
                  value={input}
                  onChange={e => setInput(e.target.value)}
                  onKeyDown={e => { if (e.key === 'Enter') handleSubmit(); }}
                  placeholder="–í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç"
                  inputMode="text"
                  enterKeyHint="go"
                  className={`w-full h-12 sm:h-12 text-base rounded-2xl border px-4 py-3 focus:outline-none focus:ring-2 ${status === 'err' ? 'focus:ring-rose-300 border-rose-300' : 'focus:ring-rose-300'}`}
                />
                <button
                  onClick={handleSubmit}
                  className="w-full md:w-auto h-12 px-5 rounded-2xl bg-rose-500 text-white text-base font-medium shadow hover:brightness-110 active:translate-y-px"
                >
                  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                </button>
              </div>

              {msg && (
                <div className={`mt-2 sm:mt-3 text-sm ${status === 'ok' ? 'text-emerald-700' : status === 'err' ? 'text-rose-700' : 'opacity-70'}`}>{msg}</div>
              )}

              {status === 'err' && level.hint && (
                <div className="mt-2 text-xs sm:text-xs opacity-60">–ü–æ–¥—Å–∫–∞–∑–∫–∞: {level.hint}</div>
              )}
            </>
          ) : (
            <Finale onReplay={resetAll} />
          )}
        </div>
      </div>
    </div>
  );
}

function Header({ onReset, progressPct, idx, total }) {
  return (
    <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 sm:gap-3">
      <div className="flex items-center gap-2">
        <Sparkles className="size-6" />
        <h1 className="text-lg sm:text-xl md:text-2xl font-semibold">Love Password</h1>
      </div>
      <div className="flex items-center gap-2 sm:gap-3">
        <div className="w-32 sm:w-40 md:w-56 h-2 rounded-full bg-black/10 overflow-hidden">
          <div className="h-full bg-gradient-to-r from-rose-400 to-indigo-400" style={{ width: `${progressPct}%` }} />
        </div>
        <div className="text-[11px] sm:text-xs opacity-70 whitespace-nowrap">{idx}/{total}</div>
        <button onClick={onReset} className="h-10 px-3 rounded-xl border hover:bg-white inline-flex items-center gap-1 active:translate-y-px"><RefreshCcw className="size-4"/> –°–±—Ä–æ—Å</button>
      </div>
    </div>
  );
}

function HeartLock({ open, shake }) {
  return (
    <div className="flex items-center justify-center">
      <div className={`relative inline-flex items-center justify-center rounded-full border bg-white/80 w-24 h-24 sm:w-28 sm:h-28 shadow ${shake ? 'animate-[wiggle_0.25s_ease-in-out]' : ''}`}>
        {open ? <Unlock className="size-8 sm:size-10 text-rose-500" /> : <Lock className="size-8 sm:size-10 text-rose-500" />}
        <Heart className="absolute -z-10 opacity-30" size={84} />
      </div>
      <style>{`@keyframes wiggle { 0%,100%{ transform: translateX(0);} 25%{ transform: translateX(-4px);} 75%{ transform: translateX(4px);} }`}</style>
    </div>
  );
}

function Finale({ onReplay }) {
  return (
    <div className="text-center">
      <div className="flex items-center justify-center">
        <div className="relative inline-flex items-center justify-center rounded-full border bg-white/80 w-28 h-28 sm:w-32 sm:h-32 shadow">
          <Heart className="size-12 sm:size-14 text-rose-500" />
        </div>
      </div>
      <h3 className="text-xl sm:text-2xl md:text-3xl font-bold mt-4">–¢—ã –æ—Ç–≥–∞–¥–∞–ª(–∞) –º–µ–Ω—è üíñ</h3>
      <p className="opacity-70 mt-2 text-sm sm:text-base">–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –º–æ–π –∫–ª—é—á. –ü–æ–ª—å–∑—É–π—Å—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∏ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é üòè</p>
      <div className="mt-4 sm:mt-5">
        <button onClick={onReplay} className="w-full sm:w-auto h-11 px-5 rounded-2xl border font-medium hover:bg-white active:translate-y-px">–ò–≥—Ä–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞</button>
      </div>
    </div>
  );
}

function pick(arr) { return arr[Math.floor(Math.random() * arr.length)] }
function saveProgress(i) { try { localStorage.setItem(STORAGE_KEY, String(i)); } catch {} }
function loadProgress() { try { const v = localStorage.getItem(STORAGE_KEY); return v ? Number(v) : 0; } catch { return 0; } }

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// –£–†–û–í–ù–ò: 20 —à—Ç—É–∫ —Å —Ñ–ª–∏—Ä—Ç–æ–º/–ø–æ–¥–∫–æ–ª–∞–º–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
// –ú–µ–Ω—è–π –æ—Ç–≤–µ—Ç—ã –ø–æ–¥ —Å–µ–±—è, –ø–æ–¥—Å–∫–∞–∑–∫–∏ ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
const LEVELS = [
  lvl({
    prompt: "üåÜ –ì–æ—Ä–æ–¥, –≥–¥–µ —è —Ä–æ–¥–∏–ª—Å—è (–∏ –≥–¥–µ –Ω–∞—á–∞–ª–∞—Å—å –º–æ—è –ª–µ–≥–µ–Ω–¥–∞)",
    answer: "–ë–∏—à–∫–µ–∫",
    hint: "–ó–¥–µ—Å—å –ª—É—á—à–∞—è —à–æ—Ä–ø–æ –∏ –≤–∏–¥ –Ω–∞ –≥–æ—Ä—ã",
    reactions: {
      correct: ["–¢–æ—á–Ω–æ! –ú–æ–π –¥–æ–º –º–æ–π –±–∞—Å—Ç–∏–æ–Ω üòé", "–í–æ—Ç —ç—Ç–æ –∑–Ω–∞–Ω–∏–µ —Å –ª—é–±–æ–≤—å—é üíò"],
      wrong: ["–ß—É—Ç—å —Ç–µ–ø–ª–µ–µ ‚Äî –∏ —É–≥–∞–¥–∞–µ—à—å", "–ì–æ—Ä–æ–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ —Ç—É —Å–∞–º—É—é –±—É–∫–≤—É"]
    }
  }),
  lvl({
    prompt: "‚òï –ë–µ–∑ —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞ —è –Ω–µ —á–µ–ª–æ–≤–µ–∫ –ø–æ —É—Ç—Ä–∞–º",
    answer: "–∫–æ—Ñ–µ",
    hint: "–ê—Ä–æ–º–∞—Ç, –±–æ–¥—Ä–∏—Ç, –∏–Ω–æ–≥–¥–∞ —Å –º–æ–ª–æ–∫–æ–º",
    reactions: {
      correct: ["–≠—Å–ø—Ä–µ—Å—Å-–¥–∞!", "–ö–∞–∫ —Ç—ã –º–µ–Ω—è –ø–æ–Ω–∏–º–∞–µ—à—å ‚òïüíñ"],
      wrong: ["–≠—Ç–æ –Ω–µ —á–∞–π‚Ä¶ —Ö–æ—Ç—è –∏ –æ–Ω –º–∏–ª", "–ü–æ–¥—É–º–∞–π –æ –∑–µ—Ä–Ω–µ –∏ –±–æ–¥—Ä–æ—Å—Ç–∏"]
    }
  }),
  lvl({
    prompt: "üíª –ï—Å–ª–∏ —è –º–æ–ª—á—É ‚Äî –æ–±—ã—á–Ω–æ –∑–∞–Ω—è—Ç‚Ä¶",
    answer: "–∫–æ–¥–æ–º",
    hint: "–¢–æ, —á—Ç–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –∏–¥–µ–∏ –≤ –∫–Ω–æ–ø–æ—á–∫–∏",
    reactions: {
      correct: ["0101 ‚Äî –∑–Ω–∞—á–∏—Ç –¥–∞!", "–ü–æ–π–º–∞–ª–∞ –ø–æ—Ç–æ–∫ –º–æ–∏—Ö –º—ã—Å–ª–µ–π üòè"],
      wrong: ["–ù–µ –∑–≤–æ–Ω–∫–∏ –∏ –Ω–µ —Å–µ—Ä–∏–∞–ª—ã", "–°–º–æ—Ç—Ä–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"]
    }
  }),
  lvl({
    prompt: "üöÄ –ü—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —è —Ä–∞–∑–≤–∏–≤–∞—é —á–∞—â–µ, —á–µ–º –µ–º",
    answer: "gopost",
    note: "–û—Ç–≤–µ—Ç –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ ‚Äî –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤",
    hint: "Go + ‚Ä¶",
    reactions: {
      correct: ["–ú–æ—ë –¥–µ—Ç–∏—â–µ —É–∑–Ω–∞–Ω–æ!", "–ü–æ—Ö–æ–∂–µ, —Ç—ã —á–∏—Ç–∞–µ—à—å –º–æ–∏ –º—ã—Å–ª–∏ –∏ –ø–ª–∞–Ω—ã üòé"],
      wrong: ["–ß—É—Ç—å –±–ª–∏–∂–µ –∫ –º–æ–µ–º—É —Ç–µ–ª–µ–≥—Ä–∞–º–º—É", "–°–æ—Å—Ç–æ–∏—Ç –∏–∑ 6 –±—É–∫–≤"]
    }
  }),
  lvl({
    prompt: "üçú –õ—é–±–∏–º–æ–µ –±–ª—é–¥–æ, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —è —Å—á–∞—Å—Ç–ª–∏–≤",
    answer: "–ª–∞–ø—à–∞",
    reactions: {
      correct: ["–°—ä–µ–¥–∏–º –ø–æ —Ç–∞—Ä–µ–ª–æ—á–∫–µ? üòå", "–ü–æ–±–µ–¥–Ω—ã–π —Å–æ—É—Å!"],
      wrong: ["–ù–µ –ø–ª–æ–≤ (—Ö–æ—Ç—è –æ–Ω —Ç–æ–ø)", "–¢–æ–Ω–∫–∏–µ –∏ –¥–ª–∏–Ω–Ω—ã–µ‚Ä¶ –Ω–∏—Ç–∏ —Å—á–∞—Å—Ç—å—è"]
    }
  }),
  lvl({
    prompt: "üéß –ß—Ç–æ —è —Å–ª—É—à–∞—é, –∫–æ–≥–¥–∞ –¥–µ–ª–∞—é –≤–∏–¥, —á—Ç–æ —Ä–∞–±–æ—Ç–∞—é",
    answer: "–ª–æ—É—Ñ–∞–π",
    hint: "–ü–∏—à–µ—Ç—Å—è –∫–∞–∫ –∑–≤—É—á–∏—Ç: –ª‚Ä¶—Ñ‚Ä¶",
    reactions: {
      correct: ["–õ–æ—É-—Ñ–∞–π ‚Äî —Ö–∞–π-–≤–∞–π–± ‚ú®", "–í–æ—Ç —ç—Ç–æ —Ä–∏—Ç–º –Ω–∞—à–∏—Ö —Å–µ—Ä–¥–µ—Ü"],
      wrong: ["–ù–µ —Ä—ç–ø (—Å–µ–π—á–∞—Å)", "–§–æ–Ω –¥–ª—è —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ—Å—Ç–∏"]
    }
  }),
  lvl({
    prompt: "üì± –ì–¥–µ —è –∑–∞–ª–∏–ø–∞—é –±–æ–ª—å—à–µ, —á–µ–º —Å—Ç–æ–∏–ª–æ –±—ã",
    answer: "—Ç–µ–ª–µ–≥—Ä–∞–º",
    reactions: {
      correct: ["–î–∞, –º–æ–∏ —á–∞—Ç—ã ‚Äî –º–æ—è –∫—Ä–µ–ø–æ—Å—Ç—å", "–ü–æ–ø–∞–ª—Å—è —Å —ç–∫—Ä–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º üòÖ"],
      wrong: ["–ù–µ –∏–Ω—Å—Ç–∞ (—Ö–æ—Ç—è‚Ä¶)", "–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä —Å –∫–∞–Ω–∞–ª–∞–º–∏"]
    }
  }),
  lvl({
    prompt: "üêù –° —á–µ–º –∞—Å—Å–æ—Ü–∏–∏—Ä—É–µ—Ç—Å—è –º–æ—è —Å–µ–º—å—è",
    answer: "–º—ë–¥",
    hint: "–°–ª–∞–¥–∫–æ, –ª–∏–ø–∫–æ, –ø–æ–ª–µ–∑–Ω–æ",
    reactions: {
      correct: ["–°–ª–∞–¥–∫–∞—è –ø—Ä–∞–≤–¥–∞ üçØ", "–ü—á—ë–ª–∫–∏ –∞–ø–ª–æ–¥–∏—Ä—É—é—Ç"],
      wrong: ["–°–ª–∞–¥–æ—Å—Ç—å –Ω–∞ –ú", "–ù–µ —Å–∞—Ö–∞—Ä"]
    }
  }),
  lvl({
    prompt: "üß≥ –°—Ç—Ä–∞–Ω–∞, –∫—É–¥–∞ —è —Ä–≤—É—Å—å –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–º–æ–≥—É",
    answer: "—è–ø–æ–Ω–∏—è",
    reactions: {
      correct: ["Konnichiwa, –º–µ—á—Ç–∞! üáØüáµ", "–°—É—à–∏ –∏ –º–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω—ã–µ –∂–¥—É—Ç"],
      wrong: ["–ù–µ –ö–æ—Ä–µ—è", "–û—Å—Ç—Ä–æ–≤–∞, –∞–Ω–∏–º–µ, –ø–æ—Ä—è–¥–æ–∫"]
    }
  }),
  lvl({
    prompt: "üïπ –ò–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —è —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –≥–µ–Ω–∏–µ–º",
    answer: "gta",
    note: "–ö–æ—Ä–æ—Ç–∫–æ, –ª–∞—Ç–∏–Ω–∏—Ü–µ–π",
    reactions: {
      correct: ["–£–≥–æ–Ω—è–µ–º —Å–µ—Ä–¥—Ü–∞ üí®", "–ú–∏—Å—Å–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞"],
      wrong: ["–ù–µ Minecraft", "–¢—Ä–∏ –±—É–∫–≤—ã"]
    }
  }),
  lvl({
    prompt: "üí¨ –§—Ä–∞–∑–∞, –∫–æ—Ç–æ—Ä—É—é —è –≥–æ–≤–æ—Ä—é —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ",
    answer: "—â–∞ —Å–¥–µ–ª–∞—é",
    reactions: {
      correct: ["–ò –∏–Ω–æ–≥–¥–∞ –¥–∞–∂–µ –¥–µ–ª–∞—é üòÖ", "–ú–æ–π —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Å–ª–æ–≥–∞–Ω"],
      wrong: ["–î–≤–µ –∫–æ—Ä–æ—Ç–∫–∏–µ, –æ–¥–Ω–∞ –¥–ª–∏–Ω–Ω–∞—è", "–ó–≤—É—á–∏—Ç –∫–∞–∫ –æ–±–µ—â–∞–Ω–∏–µ"]
    }
  }),
  lvl({
    prompt: "üòà –ß—Ç–æ —è –¥–µ–ª–∞—é, –∫–æ–≥–¥–∞ —Ö–æ—á—É –≤–ø–µ—á–∞—Ç–ª–∏—Ç—å",
    answer: "—à—É—á—É",
    reactions: {
      correct: ["–•–∞-—Ö–∞, –≤–∏–¥–∏—à—å? üòâ", "–Æ–º–æ—Ä ‚Äî –º–æ—ë —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –æ—Ä—É–∂–∏–µ"],
      wrong: ["–ù–µ –∫–∞—á–∞—é—Å—å –∏ –Ω–µ –∫—É–ª–∏–Ω–∞—Ä—é", "–°–ª–æ–≤–µ—Å–Ω–æ –∏ –æ—Å—Ç—Ä–æ"]
    }
  }),
  lvl({
    prompt: "üíò –ö–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å, —á—Ç–æ —è —á—É–≤—Å—Ç–≤—É—é, –∫–æ–≥–¥–∞ —Ç—ã –ø–∏—à–µ—à—å –º–Ω–µ",
    answer: "—Ä–∞–¥–æ—Å—Ç—å",
    reactions: {
      correct: ["–í–æ—Ç –∏ —Å–µ–π—á–∞—Å ‚Äî —É–ª—ã–±–∞—é—Å—å", "–¢—ã ‚Äî –º–æ–π –¥–æ—Ñ–∞–º–∏–Ω"],
      wrong: ["–ù–µ —Ç—Ä–µ–≤–æ–≥–∞", "–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ, —Ç—ë–ø–ª–æ–µ"]
    }
  }),
  lvl({
    prompt: "üòÇ –ß—Ç–æ —è —Ç–æ—á–Ω–æ –Ω–µ –ª—é–±–ª—é (–Ω–æ –º–Ω–æ–≥–∏–µ –¥—É–º–∞—é—Ç, —á—Ç–æ –ª—é–±–ª—é)",
    answer: "–∫–∞–ø—É—Å—Ç—É",
    reactions: {
      correct: ["–ü–æ–±–µ–¥–∞ –æ–≤–æ—â–∞–º‚Ä¶ –Ω–æ –±–µ–∑ –Ω–µ—ë", "–†–∞—Å–∫—Ä—ã—Ç —Å–µ–∫—Ä–µ—Ç –º–æ–µ–π —Ç–∞—Ä–µ–ª–∫–∏"],
      wrong: ["–≠—Ç–æ –Ω–µ –±—Ä–æ–∫–∫–æ–ª–∏", "–õ–∏—Å—Ç—å—è-—Å–ª–æ–∏-—Å–ª—ë–∑—ã"]
    }
  }),
  lvl({
    prompt: "üòè –ß—Ç–æ –æ–±–æ –º–Ω–µ –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –∑–∞–º–µ—á–∞—é—Ç",
    answer: "—É–ª—ã–±–∫—É",
    reactions: {
      correct: ["–¢–≤–æ—é ‚Äî —Ç–æ–∂–µ üòâ", "–≠—Ç–æ –æ—Ä—É–∂–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ—á–∞—Ä–æ–≤–∞–Ω–∏—è"],
      wrong: ["–ù–µ –≥–ª–∞–∑–∞ (—Ö–æ—Ç—è‚Ä¶) ", "–¢–æ, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–æ–µ"]
    }
  }),
  lvl({
    prompt: "üß† –ß—Ç–æ —É –º–µ–Ω—è —Å–∏–ª—å–Ω–µ–µ ‚Äî –ª–æ–≥–∏–∫–∞ –∏–ª–∏ —Ö–∞—Ä–∏–∑–º–∞ (–æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º)",
    answer: "—Ö–∞—Ä–∏–∑–º–∞",
    reactions: {
      correct: ["–û—á–µ–≤–∏–¥–Ω–æ –∂–µ üòé", "–ï—ë —É –Ω–∞—Å —Ö–≤–∞—Ç–∏—Ç –Ω–∞ –¥–≤–æ–∏—Ö"],
      wrong: ["–ù–µ ‚Äò–ª–æ–≥–∏–∫–∞‚Äô", "–°–∏—è–µ—Ç, –∞ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç"]
    }
  }),
  lvl({
    prompt: "ü•∂ –ö–∞–∫ —è —Ä–µ–∞–≥–∏—Ä—É—é, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Ç—É–ø–∏—Ç –≤ –∫–æ–¥–µ",
    answer: "—Ç–µ—Ä–ø–ª—é",
    reactions: {
      correct: ["–í–Ω–µ—à–Ω–µ ‚Äî –¥–∞, –≤–Ω—É—Ç—Ä–∏ ‚Äî –æ–≥–æ–Ω—å", "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ ‚Äî –º–æ–π –±–∞–≥-—Ñ–∏–∫—Å"],
      wrong: ["–ù–µ ‚Äò–±–æ–º–±–ª—é‚Äô", "–°–¥–µ—Ä–∂–∞–Ω–Ω–æ‚Ä¶ –∫–∞–∫ –±—É–¥—Ç–æ"]
    }
  }),
  lvl({
    prompt: "üí≠ –ß—Ç–æ, –ø–æ-—Ç–≤–æ–µ–º—É, —è –¥—É–º–∞—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å",
    answer: "–æ–Ω–∞ —É–º–Ω–∏—Ü–∞",
    reactions: {
      correct: ["–ò —ç—Ç–æ –ø—Ä–∞–≤–¥–∞ üòå", "–°–º–µ–∫–∞–µ—à—å!"],
      wrong: ["–≠—Ç–æ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç —Ç–µ–±–µ", "–î–≤–µ –∫–æ—Ä–æ—Ç–∫–∏–µ, –æ–¥–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ"]
    }
  }),
  lvl({
    prompt: "ü´∂ –ï—Å–ª–∏ –±—ã —è –±—ã–ª —Å–º–∞–π–ª–∏–∫–æ–º ‚Äî –∫–∞–∫–∏–º",
    answer: "üòé",
    hint: "–ú–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Å–∞–º —ç–º–æ–¥–∑–∏",
    reactions: {
      correct: ["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é üòé", "–≠—Ç–∞ —à—Ç—É–∫–∞ –º–Ω–µ –∏–¥—ë—Ç"],
      wrong: ["–° –æ—á–∫–∞–º–∏‚Ä¶", "–•–æ–ª–æ–¥–Ω—ã–π, –Ω–æ —Å—Ç–∏–ª—å–Ω—ã–π"]
    }
  }),
  lvl({
    prompt: "üíñ –ß—Ç–æ —è –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∏—â—É ‚Äî –≤ –ª—é–¥—è—Ö, –≤ –∂–∏–∑–Ω–∏, –≤ —Ç–µ–±–µ",
    answer: "–ø–æ–Ω–∏–º–∞–Ω–∏–µ",
    reactions: {
      correct: ["–í–æ—Ç –æ–Ω–æ. –°–∞–º–æ–µ —Ü–µ–Ω–Ω–æ–µ", "–ù–∞—à –æ–±—â–∏–π –ø–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω üíó"],
      wrong: ["–ù–µ ‚Äò–∏–¥–µ–∞–ª‚Äô", "–ö–ª—é—á –∫ —Å–µ—Ä–¥—Ü—É –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ ‚Äò–ø–æ‚Ä¶‚Äô"]
    }
  }),
];

function lvl({ prompt, answer, reactions, note, hint }) {
  return { prompt, answer, reactions, note, hint };
}
